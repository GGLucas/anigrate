#!/usr/bin/env python
import sys
import os
import datetime
import time

from ConfigParser import ConfigParser
from urllib2 import quote, unquote

from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean, create_engine
from sqlalchemy.orm import sessionmaker, relation
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import and_, or_, not_

# {{{ Help
HELPTEXT = """
Usage: %s [COMMAND] [ARGS...]: [SELECTOR]
Manage a list of watched anime or television series.

Database:
    By default anigrate uses an sqlite database in $HOME/.anigrate/db,
    see the example anigraterc for all the other possibilities.

Commands:
    initdb
        Initialise the database with all the necessary tables.

    list: [selector]
        List all series matched by [selector].
        If no selector is given, match all series.

    log: (selector)
        Show a detailed log for series matching (selector).

    hist [num]: [selector]
        Show the last [num] watched episode entries for series matching
        [selector]. Num defaults to 15, matches all series if no selector
        is specified.

    add [category] [watched[/total][*seasons]] [rating] [duration]: (name)
        Add a new series entry with name specified by (name).
        Optionally, you can specify the category, duration, amount of episodes
        watched, amount of episodes total, amount of seasons and rating.

        Note that if you specify to create multiple seasons, every season will
        have the same watched and total amounts you specified here.

    category [category]: (selector)
        Mark all series matched by (selector) as having category [category].

    remove: (selector)
        Completely remove any series that match (selector).

    rate <score>: (selector)
        Rate all series matched by (selector) with <score>.

    [un]drop: (selector)
        Mark all series matched by (selector) as dropped or not dropped.

    length <length>: (selector)
        Set the active season's length in episodes.

    duration <time>: (selector)
        Set the average duration of an episode in series matching (selector).
        This is used to calculate total watching time, defaults to 24 minutes
        per episode for every series.

    time: [selector]
        Get the total watching time spent on series matching [selector].
        If no selector is given the total time for all series is given.

    watch [num]: (selector)
        Change the episodes watched count. Without [num] specified it will be
        incremented by one. Using specifiers like "+3" or "-2" you can increment
        or decrement the watched count by that number. Specifying an absolute
        number will watch up to that episode or remove everything from that
        episode on. Watch always uses the currently active season.

    season add [num] [watched[/total]]: (selector)
        Add a new season, if num is specified the season number is set to that, 
        otherwise it will default to one more than the previous season.

        Optionally, you can specify the watched/total episode amounts to be set 
        for this season.

    season remove [num]: (selector)
        Remove the season with number [num] from a series. If num is not
        specified the currently active season will be removed.

    season length <season> <length>: (selector)
        Set a season's length in episodes.

    season active <num>: (selector)
        Set season with number <num> as the active season. Can be a relative 
        offset like +1 or -2.

    runserver [type] [host] [port]
        Run a server displaying an html public list on [host] (default: localhost)
        and [port] (default: 4310). Type is set to "http" by default and will 
        host a simple http webserver not meant to be used in production. If 
        flup is installed, you can additionally specify [type] to be "fcgi", 
        "scgi" or "ajp" and it will host a server with that protocol.

        Note that the main anigrate binary can also be used as through mod_wsgi
        as a wsgi script and it will display the same html public list.

    help
        Show this help message

Selectors:
    Selectors are used to find series to act upon. In its most basic form, a 
    selector is simply the name of a series or the beginning of a name of a 
    series (note that the selector will match any series that start with the 
    specified name). Within the selector, the options listed below can be given.

    +finished/+completed, +watching, +dropped, +undropped:
        Put any of these in a separate argument anywhere in the selector and it 
        will only match series that satisfy the condition.

    =<category>
        Will only match with the specified category.

    %%exact
        When specified, only match series that exactly match the full selector.

    %%contains
        When specified, match all series containing the selector.

    %%suffix
        When specified, match all series that end with the selector.

    %%prefix
        Default behaviour: match all series that start with with the selector.

    @rating, @activity, @watched, @title
        Set field to sort by, you can sort by series rating, series latest 
        activity, amount of episodes watched and title respectively.

    @split
        Default sort method, sorts by activity but splits into watching,
        finished and dropped groups first.

Examples
    Here are some example use cases, note that every selector specifier or 
    command can be shortened to its smallest non-ambiguous prefix.

    anigrate list
        List all series in the database.

    anigrate li: =anime
        List all series with category "anime".

    anigrate li: +w
        List only series currently being watched.

    anigrate list: +c @r
        List all completed series sorted by the rating given.

    anigrate add anime: Mushishi
        Add a new series in category "anime" with name "Mushishi".

    anigrate watch: Mushishi
        Increment the watched count on the "Mushishi" series by one.

    anigrate w +3: Mus
        Increment the watched count by three on series prefixed by "Mus".
        ie. This command would match "Mus[shishi]" and thus increment
        that by three.

    anigrate season add: Mushishi
        Add a new season to series "Mushishi".

    anigrate s act 1: Mushishi
        Set season "1" as the active season on series "Mushishi".

    anigrate length 26: Mushishi
        Set the currently active season on series "Mushishi" as being
        26 episodes long.
"""
# }}}

# {{{ Weblist HTML
PAGE_HTML = """
<!DOCTYPE html>

<html lang='en-GB'>
  <head>
    <title>%(title)s: %(selector)s</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <style type='text/css'>
        body {
            font-family: sans-serif; 
            background: white;
            color: black;
        }

        #header > h1, #header > h2 {
            margin: 0;
            text-align: center;
        }

        #header > span {
            display: block;
            text-align: center;
        }

        #gentime {
            font-size: 0.6em;
            padding-top: 1em;
            text-align: center;
        }

        #quicklinks {
            margin: 1em auto 0;
            border: 1px solid #cccccc;
            background: #f7f7f7;
            display: table;
        }

        #quicklinks ul {
            margin: 0;
            padding: 0;
        }

        #quicklinks li {
            list-style: square inside;
            margin: 0;
            padding-top: 0.3em;
            font-size: 0.8em;
        }

        #quicklinks a:link, #quicklinks a:visited {
            color: black;
            text-decoration: none;
        }

        #quicklinks a:hover {
            text-decoration: underline;
        }

        #quicklinks > div {
            display: table-row;
        }

        #quicklinks > div > div {
            padding: 1em;
            min-width: 8em;
            display: table-cell;
        }

        #quicklinks h3 {
            margin: 0;
        }

        #series ul {
            -moz-column-count: 4;
            -webkit-column-count: 4;
            column-count: 4;
            margin: 1em 0;
            padding: 0;
        }

        #series li {
            display: block;
            list-style: none;
            padding: .5em;
            margin: 0;
        }

        #series li a:last-child {
            display: none;
            float: right;
            font-size: 0.7em;
            font-weight: bold;
        }

        #series li:hover a:last-child {
            display: block;
        }

        #series li a:link, li a:visited {
            color: black;
            text-decoration: none;
        }

        #series li a:hover {
            text-decoration: underline;
        }

        #series li.f_0 { font-weight: bold; }
        #series li.d_1 a { color: #cc3030; }

        #series li.r_10 { background: #80ff80; }
        #series li.r_9 { background: #99ff80; }
        #series li.r_8 { background: #b3ff80; }
        #series li.r_7 { background: #ccff80; }
        #series li.r_6 { background: #e6ff80; }
        #series li.r_5 { background: #ffff80; }
        #series li.r_4 { background: #ffe680; }
        #series li.r_3 { background: #ffcc80; }
        #series li.r_2 { background: #ffb380; }
        #series li.r_1 { background: #ff9980; }
    </style>
  </head>
  <body>
    <div id='header'>
      <h1>%(title)s</h1>
      <h2>%(selector)s</h2>
      <span>%(numseries)d total. %(time_days).1f days</span>
    </div>

    <div id='quicklinks'>
        <div>
            <div>
                <h3>Category:</h3>
                <ul>
                    <li><a href="%(uri)s/=all">all categories</a></li>
                    %(categories)s
                </ul>
            </div>

            <div>
                <h3>Display:</h3>
                <ul>
                    <li><a href="%(cat_uri)s/@title">everything</a></li>
                    <li><a href="%(cat_uri)s/+watching">watching</a></li>
                    <li><a href="%(cat_uri)s/+finished/@rating">finished</a></li>
                    <li><a href="%(cat_uri)s/+dropped">dropped</a></li>
                </ul>
            </div>

            <div>
                <h3>Sort:</h3>
                <ul>
                    <li><a href="%(nosort_uri)s/@title">title</a></li>
                    <li><a href="%(nosort_uri)s/@rating">rating</a></li>
                    <li><a href="%(nosort_uri)s/@activity">activity</a></li>
                    <li><a href="%(nosort_uri)s/@split">split</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div id='series'>
      <ul>
        %(series)s
      </ul>
    </div>

    <div id="gentime">page generated in {{GENTIME}}s</div>
  </body>
</html>
"""

SERIES_HTML = """<li class="r_%(rate)d d_%(dropped)d f_%(finished)d"><a href="%(link)s">%(title)s</a><a href="%(loglink)s">S%(season)d %(watched)s/%(total)s</a></li>"""

CATEGORY_HTML = """<li><a href="%(link)s">%(title)s</a></li>"""

LOG_PAGE_HTML = """
<!DOCTYPE html>

<html lang='en-GB'>
  <head>
  <title>%(title)s: %(series_title)s</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <style type='text/css'>
        body {
            font-family: sans-serif; 
            background: white;
            color: black;
        }

        #header > h1, #header > h2 {
            margin: 0;
            text-align: center;
        }

        #info {
            margin: 1em auto 0;
            border: 1px solid #cccccc;
            background: #f7f7f7;
            display: table;
            font-size: 0.8em;
            min-width: 20em;
        }

        #info ul {
            margin: 0;
            padding: .5em;
        }

        #info li {
            margin: 0;
            list-style: none;
            display: table-row;
        }

        #info li span {
            display: table-cell;
        }

        #info li span:first-child {
            min-width: 10em;
            font-weight: bold;
        }

        #log table {
            margin: 1em;
            padding: 0;
            width: 100%%;
        }

        #log tr {
            list-style: none;
            width: 100%%;
        }

        #log td {
            padding: .3em;
        }

        #log tr:nth-child(odd) {
            background: #e7e7e7;
        }

        #log tr:nth-child(even) {
            background: #f7f7f7;
        }

    </style>
  </head>
  <body>
    <div id="header">
      <h1>%(title)s</h1>
      <h2>%(series_title)s</h2>
    </div>

    <div id="info" class="dropped_%(dropped)d finished_%(finished)d">
        <ul>
            <li><span>Latest</span> <span>S%(current)s %(watched)s/%(total)s</span></li>
            <li><span>Seasons</span> <span>%(seasons)s</span></li>
            <li><span>Duration</span> <span>%(duration)s min/ep</span></li>
            <li><span>Rating</span> <span>%(rating)s</span></li>
        </ul>
    </div>

    <div id="log">
        <table>
            %(log)s
        </table>
    </div>
  </body>
</html>
"""

LOG_HTML = """<tr><td>season <strong>%(season)s</strong> to ep <strong>%(episode)s</strong></td> <td>%(date)s</td></tr>"""

# }}}

# {{{ Constants
Config = None

CONF_DIR = os.getenv("HOME")+"/.anigrate"
DB_LOCATION = CONF_DIR+"/db"
CONF_LOCATION = CONF_DIR+"/config"

DEFAULT_TITLE_LIST = "Watch List"
DEFAULT_TITLE_LOG = "Watch Log"
DEFAULT_LINK = "http://en.wikipedia.org/wiki/Special:Search?search=%s"

COLOR = {
    "normal": "\033[0m",
    "unknown": "\033[1;35m",
    "header": "\033[1;33m",
    "line": "\033[1;30m",

    "series_normal": "\033[1;36m",
    "series_watching": "\033[1;34m",
    "series_dropped": "\033[1;31m",
    "seasonnum": "\033[1;35m",
    "epcount": "\033[1;34m",

    "score_top": "\033[1;32m",
    "score_high": "\033[0;32m",
    "score_normal": "\033[0;37m",
    "score_low": "\033[0;31m",
    "score_critical": "\033[1;31m",
}

DISPLAY_HEADER = \
"""\n  %(header)sSeries%(normal)s                                   | %(header)sWatched%(normal)s | %(header)sSeason%(normal)s | %(header)sRating%(normal)s """ % COLOR+\
"""\n ------------------------------------------+---------+--------+--------"""

DISPLAY_FOOTER = """                                           |         |        |        \n  %d series displayed.\n"""

DISPLAY_SERIES = """  %(title)s | %(epscurrent)s/%(epstotal)s | %(current)s | %(rating)s """

DISPLAY_WATCHED = """  %(title)s season %(season)s to ep %(finishep)s | %(date)s """

DISPLAY_HIST_HEADER = """\n  %(header)sHistory%(normal)s\n ---------------------------------------------------+------------------""" % COLOR
DISPLAY_HIST_FOOTER = """ ---------------------------------------------------+------------------\n"""

DISPLAY_LOG_HEADER = """%(line)s ..........................................+.........+........+........%(normal)s""" % COLOR
DISPLAY_LOG = """  season %(season)s to ep %(finishep)s                        . %(date)s """
DISPLAY_LOG_FOOTER = """%(line)s ..........................................+.........+........+........%(normal)s""" % COLOR
# }}}

# {{{ Models
Base = declarative_base()
Session = sessionmaker()

class Series(Base):
    """An entire series."""
    __tablename__ = "series"
    id = Column(Integer, primary_key=True)
    title = Column(String(255))
    rating = Column(Integer, default=0)
    current = Column(Integer)
    ctime = Column(DateTime)
    mtime = Column(DateTime)
    dropped = Column(Boolean, default=False)
    category = Column(String(255), default="")
    duration = Column(Integer, default=24)

    seasontotal = Column(Integer, default=1)
    epscurrent = Column(Integer, default=0)
    epstotal = Column(Integer, default=0)
    epsall = Column(Integer, default=0)
    finished = Column(Boolean, default=False)

    @property
    def current_season(self):
        return self.season_bynum(self.current)

    def season_bynum(self, num):
        for season in self.seasons:
            if season.num == num:
                return season

    def getlink(self):
        """Get the link to open for this series."""
        if Config.has_option("link", self.category):
            return Config.get("link", self.category) % self.title
        elif Config.has_option("link", "default"):
            return Config.get("link", "default") % self.title
        else:
            return DEFAULT_LINK % self.title

    def eval_finished(self):
        """Evaluate whether the series is finished."""
        self.finished = True
        self.seasontotal = 0
        self.epsall = 0

        for season in self.seasons:
            if season.current_watched < season.episode_total \
            or season.episode_total == 0:
                self.finished = False

            self.epsall += season.current_watched
            if season.num == self.current:
                self.epscurrent = season.current_watched
                self.epstotal = season.episode_total

            self.seasontotal += 1

        return self.finished

class Season(Base):
    """One season of a series."""
    __tablename__ = "seasons"
    id = Column(Integer, primary_key=True)
    num = Column(Integer)

    series_id = Column(ForeignKey("series.id"))
    series = relation(Series, primaryjoin=(series_id == Series.id), backref="seasons")

    episode_total = Column(Integer, default=0)
    current_watched = Column(Integer, default=0)

class Watched(Base):
    """A 'watched episodes' event attached to a season."""
    __tablename__ = "watched"
    id = Column(Integer, primary_key=True)

    season_id = Column(ForeignKey("seasons.id"))
    seasonnum = Column(Integer)
    season = relation(Season, primaryjoin=(season_id == Season.id), backref="watched")

    series_id = Column(ForeignKey("series.id"))
    series = relation(Series, primaryjoin=(series_id == Series.id), backref="watched")

    time = Column(DateTime)

    startep = Column(Integer)
    finishep = Column(Integer)
# }}}

# {{{ Utility functions
commands = {}

def command(name=None, cmds=None):
    """Register a function as a command."""
    def cmd(func):
        # Get command dict
        if cmds == None:
            global commands
            cm = commands
        else:
            cm = cmds

        cm[(name or func.__name__)] = func
        return func

    return cmd

def getcommand(name, cmds=None):
    """Get a command by name."""
    # Get command dict
    if cmds == None:
        global commands
        cmd = commands
    else:
        cmd = cmds

    # Exact match
    if name in cmd:
        return cmd[name]

    # Prefix match
    candidate = filter(lambda x: x.startswith(name), cmd.keys())

    if len(candidate) == 1:
        return cmd[candidate[0]]
    elif candidate:
        return candidate
    else:
        return None

def dbbind():
    """Bind the sqlalchemy database engine and return the session."""
    # Try to read config
    if not hasattr(Session, "_Bound") or not Session._Bound:
        global Config
        Config = ConfigParser()
        Config.read([CONF_LOCATION,os.path.join(os.getcwd(), "anigraterc")])

        if Config.has_option("database", "uri"):
            engine = create_engine(Config.get("database", "uri"))
            Base.metadata.bind = engine
            Session._Bound = True
            Session.configure(bind=engine)
        else:
            # Default location
            if not os.access(CONF_DIR, os.F_OK):
                os.mkdir(CONF_DIR)

            engine = create_engine('sqlite:///'+DB_LOCATION)
            Base.metadata.bind = engine
            Session.configure(bind=engine)
            Session._Bound = True

            if not os.access(DB_LOCATION, os.F_OK):
                initdb(session=Session())

    return Session()

def getselection(session, selector, list=True):
    """Get all anime matching a selector"""
    q = session.query(Series)
    mode = "prefix"
    sort = False

    for opt in selector[:]:
        if opt.startswith("+"):
            if "+finished".startswith(opt) or "+completed".startswith(opt):
                q = q.filter(Series.finished == True)
                q = q.filter(Series.dropped == False)
                selector.remove(opt)
            elif "+watching".startswith(opt):
                q = q.filter(Series.finished == False)
                q = q.filter(Series.dropped == False)
                selector.remove(opt)
            elif "+dropped".startswith(opt):
                q = q.filter(Series.dropped == True)
                selector.remove(opt)
            elif "+undropped".startswith(opt):
                q = q.filter(Series.dropped == False)
                selector.remove(opt)
        elif opt.startswith("%"):
            mode = opt[1:]
            selector.remove(opt)
        elif opt.startswith("="):
            if opt[1:] != "all":
                q = q.filter(Series.category == opt[1:])
            selector.remove(opt)
        elif opt.startswith("@"):
            if "@rating".startswith(opt):
                selector.remove(opt)
                sort = True
                q = q.order_by(Series.rating.desc())
            elif "@activity".startswith(opt):
                selector.remove(opt)
                sort = True
                q = q.order_by(Series.mtime.desc())
            elif "@watched".startswith(opt):
                selector.remove(opt)
                sort = True
                q = q.order_by(Series.epscurrent.desc())
            elif "@title".startswith(opt):
                selector.remove(opt)
                sort = True
                q = q.order_by(Series.title.asc())
            elif "@split".startswith(opt):
                selector.remove(opt)
                sort = True
                q = q.order_by(Series.dropped.asc(), Series.finished.asc(), Series.mtime.desc())

    # Default sort order
    if not sort:
        q = q.order_by(Series.dropped.asc(), Series.finished.asc(), Series.mtime.desc())

    if selector:
        selector = " ".join(selector)

        if "exact".startswith(mode):
            q = q.filter(Series.title.ilike(selector))
        elif "contains".startswith(mode):
            q = q.filter(Series.title.contains(selector))
        elif "suffix".startswith(mode):
            q = q.filter(Series.title.endswith(selector))
        else:
            q = q.filter(Series.title.startswith(selector))

    return q.all() if list else q

def gettime(selection):
    """Get total time watching for this selection."""
    total = 0

    for sel in selection:
        total += sel.epsall*sel.duration

    totaldays = total/float(1440)
    return (total, totaldays)

def padstr(string, pad, right=False):
    # Convert to string
    string = str(string)

    # Padd
    while len(string) < pad:
        if right:
            string = " "+string
        else:
            string = string+" "

    return string

# }}}

# {{{ Display functions
def dispseries(sel, display=True):
    """Display a line for a series."""
    data = {
        "title": sel.title,
        "current": padstr(sel.current, 6),
        "epscurrent": padstr(sel.epscurrent, 3),
        "epstotal": padstr(sel.epstotal, 3, right=True),
        "rating": padstr(sel.rating, 6),
    }

    # Color rating
    if sel.rating == 0:
        data['rating'] = COLOR['unknown']+"??    "+COLOR['normal']
    elif sel.rating <= 4:
        data['rating'] = COLOR['score_critical']+data['rating']+COLOR['normal']
    elif sel.rating <= 5:
        data['rating'] = COLOR['score_low']+data['rating']+COLOR['normal']
    elif sel.rating >= 10:
        data['rating'] = COLOR['score_top']+data['rating']+COLOR['normal']
    elif sel.rating >= 8:
        data['rating'] = COLOR['score_high']+data['rating']+COLOR['normal']
    else:
        data['rating'] = COLOR['score_normal']+data['rating']+COLOR['normal']

    # Dropped note
    if sel.dropped:
        data['title'] = "(dropped) "+data['title']

    # Truncate series
    if len(data['title']) > 40:
        data['title'] = data['title'][:37]+"..."

    data['title'] = padstr(data['title'], 40)

    if sel.epstotal == 0:
        data['epstotal'] = COLOR['unknown']+" ??"+COLOR['normal']

    # Mark watching/dropped
    if sel.dropped:
        data['title'] = COLOR['series_dropped']+data['title']+COLOR['normal']
        data['current'] = COLOR['series_dropped']+data['current']+COLOR['normal']
        data['epscurrent'] = COLOR['series_dropped']+data['epscurrent']
        data['epstotal'] = data['epstotal']+COLOR['normal']
    elif not sel.finished:
        data['title'] = COLOR['series_watching']+data['title']+COLOR['normal']
        data['current'] = COLOR['series_watching']+data['current']+COLOR['normal']
        data['epscurrent'] = COLOR['series_watching']+data['epscurrent']
        data['epstotal'] = data['epstotal']+COLOR['normal']
    else:
        data['title'] = COLOR['series_normal']+data['title']+COLOR['normal']
        data['current'] = COLOR['series_normal']+data['current']+COLOR['normal']
        data['epscurrent'] = COLOR['series_normal']+data['epscurrent']
        data['epstotal'] = data['epstotal']+COLOR['normal']

    if display:
        print(DISPLAY_SERIES % data)
    else:
        return DISPLAY_SERIES % data

def dispwatched(sel, watched, display=True, template=None):
    """Display a watched episode string"""
    data = {
        "title": sel.title,
        "season": padstr(watched.seasonnum, 1),
        "startep": padstr(watched.startep, 2),
        "finishep": padstr(watched.finishep, 2),
        "date": watched.time.strftime("%a %d %b, %Y"),
    }

    # Truncate series
    if len(data['title']) > 31:
        data['title'] = data['title'][:28]+"..."

    data['title'] = padstr(data['title'], 31)

    # Color title
    if sel.rating != 0:
        if sel.rating <= 4:
            data['title'] = COLOR['score_critical']+data['title']+COLOR['normal']
        elif sel.rating <= 5:
            data['title'] = COLOR['score_low']+data['title']+COLOR['normal']
        elif sel.rating >= 10:
            data['title'] = COLOR['score_top']+data['title']+COLOR['normal']
        elif sel.rating >= 8:
            data['title'] = COLOR['score_high']+data['title']+COLOR['normal']
        else:
            data['title'] = COLOR['score_normal']+data['title']+COLOR['normal']

    # Color season
    data['season'] = COLOR['seasonnum']+str(data['season'])+COLOR['normal']

    # Color episode
    data['startep'] = COLOR['epcount']+str(data['startep'])+COLOR['normal']
    data['finishep'] = COLOR['epcount']+str(data['finishep'])+COLOR['normal']

    if template is None:
        template = DISPLAY_WATCHED

    if display:
        print(template % data)
    else:
        return template % data


# }}}

# {{{ Weblist
# Try to get flup
try:
    import flup
    HAVE_FLUP = True
except:
    HAVE_FLUP = False

# WSGI Application
def application(environ, start_response):
    # Save time
    start_time = time.time()

    if environ.has_key("SCRIPT_NAME") and environ.get("SCRIPT_NAME"):
        # Use request URI
        uri = unquote(environ.get("REQUEST_URI", "")).lstrip("/")

        # Strip script name
        uri = uri.lstrip(environ.get("SCRIPT_NAME", ""))

        # Strip query args
        uri = uri.split("?")[0]
    else:
        # Use PATH_INFO
        uri = environ.get("PATH_INFO").lstrip("/")

    # Connect to db
    session = dbbind()

    # Check for page to display
    if uri.startswith("log/"):
        # Remove log argument
        selector = [uri.lstrip("log/")]

        # Match exact by default
        if not [x for x in selector if x.startswith("%")]:
            selector.append("%e")

        # Get selection
        selection = getselection(session, selector)

        # Check selection
        if not selection:
            data = "Error: series matching selector not found."
        else:
            series = selection[0]

            # Page data dictionary
            data = {
                "title": Config.get("weblist","title_log") if Config.has_option("weblist","title_log") else DEFAULT_TITLE_LOG,
                "series_title": series.title,
                "uri": environ.get("SCRIPT_NAME", "/").rstrip("/"),

                "seasons": len(series.seasons),
                "current": str(series.current),
                "watched": str(series.epscurrent),
                "total": str(series.epstotal) if series.epstotal else "??",
                "rating": str(series.rating) if series.rating else "??",
                "duration": str(series.duration),
                "dropped": series.dropped,
                "finished": series.finished,
            }

            # Get watch log
            data['log'] = ''

            for watch in session.query(Watched).filter(
                    Watched.series == series
            ).order_by(Watched.time.desc(), Watched.seasonnum.desc(), Watched.finishep.desc()):
                data['log'] += LOG_HTML % {
                    "season": watch.seasonnum,
                    "episode": watch.finishep,
                    "date": watch.time,
                }

            # Generate page
            data = LOG_PAGE_HTML % data
    else:
        # Split into selector arguments
        selector = uri.split("/")

        ## Handle empty selectors
        if not selector or selector == ['']:
            selector = []

        if not selector and Config.has_option("weblist", "default"):
            selector = Config.get("weblist", "default").split()

        # Page data dictionary
        data = {
            "series": "",
            "seriestime": 1.56,
            "selector": " ".join(selector) if selector else "All Series",
            "title": Config.get("weblist","title_list") if Config.has_option("weblist","title_list") else DEFAULT_TITLE_LOG,
            "uri": environ.get("SCRIPT_NAME", "/").rstrip("/"),
        }

        # Category uri
        ## Find category in selector
        cat = None
        for sel in selector:
            if sel.startswith("="):
                cat = sel[1:]

        ## Build uri
        if cat:
            data['cat_uri'] = data['uri']+"/="+cat
        else:
            data['cat_uri'] = data['uri']

        # Unsorted uri
        data['nosort_uri'] = data['uri']+"/"+"/".join([x for x in selector if not x.startswith("@")])

        # Category list
        data['categories'] = ''

        for cat in session.query(Series).group_by(Series.category).all():
            data['categories'] += CATEGORY_HTML % {
                "title": cat.category,
                "link": data['uri']+"/="+cat.category,
            }

        # Retrieve series
        selection = getselection(session, selector)
        data['time_minutes'], data['time_days'] = gettime(selection)
        data['numseries'] = len(selection)

        # Add series to list
        for series in selection:
            data['series'] += SERIES_HTML % {
                "title": series.title,
                "rate": series.rating,
                "dropped": series.dropped,
                "finished": series.finished,
                "season": series.current,
                "link": series.getlink(),
                "loglink": data['uri']+"/log/"+quote(series.title),

                "watched": str(series.epscurrent),
                "total": str(series.epstotal) if series.epstotal else "??",
            }

        # Generate page
        data = PAGE_HTML % data

    # Close session
    session.close()

    # Send response
    start_response('200 OK', [('Content-Type', 'text/html')])
    return data.replace("{{GENTIME}}", str(round(time.time()-start_time, 3)), 1)

@command()
def runserver(arg, selector):
    if not arg:
        arg = ["http"]

    if len(arg) >= 3:
        try:
            int(arg[2])
        except:
            return "Error: port (argument 3) is not a valid integer."

        bind = (arg[1], int(arg[2]))
    else:
        bind = ("localhost", 4310)

    if arg[0] in ('fcgi','scgi','ajp'):
        if HAVE_FLUP:
            if arg[0] == "fcgi":
                from flup.server.fcgi import WSGIServer
            elif arg[0] == "scgi":
                from flup.server.scgi import WSGIServer
            elif arg[0] == "ajp":
                from flup.server.ajp import WSGIServer

            print("serving %s list on %s port %d." % (arg[0], bind[0], bind[1]))
            WSGIServer(application,
                bindAddress=bind
            ).run()
        else:
            return "Error: flup is required to be installed for fcgi, scgi or ajp servers."
    elif arg[0] == 'http':
        from wsgiref.simple_server import make_server
        print("serving http list on %s port %d." % bind)
        srv = make_server(bind[0], bind[1], application)
        srv.serve_forever()
    else:
        servers = ['http']
        if HAVE_FLUP: servers += ['fcgi','scgi','ajp']
        return "Error: invalid server type. Available: %s." % ", ".join(servers)
# }}}

# {{{ Commands
# {{{ initdb
@command()
def initdb(arg=None, selector=None, session=None):
    """Initialise the database for use."""
    if not session:
        dbbind()
    Base.metadata.create_all()
# }}}

# {{{ add
@command()
def add(arg, selector):
    if not selector:
        return "Error: selector required."

    # Bind database
    session = dbbind()
    selector = " ".join(selector)

    # Don't create if one already exists
    if session.query(Series).filter(Series.title.ilike(selector)).all():
        return "Error: A series with this name already exists..."

    # Create a new series
    series = Series(title=selector, current=1)
    series.ctime = datetime.datetime.now()
    series.mtime = datetime.datetime.now()

    print("Adding: %s..." % series.title)

    ## Category
    if len(arg) > 0:
        series.category = arg[0]

    if len(arg) > 2:
        try:
            series.rating = int(arg[2])
        except:
            return "Error: rating is not a valid number."

    if len(arg) > 3:
        try:
            series.duration = int(arg[3])
        except:
            return "Error: duration is not a valid number."

    session.add(series)
    session.commit()

    ## Parse episodes
    if len(arg) > 1:
        watched = arg[1]
        total = 0
        seasons = 1

        if "*" in watched:
            try:
                watched, seasons = watched.split("*")
            except:
                return "Error: episodes in invalid format."

        if "/" in watched:
            try:
                watched, total = watched.split("/")
            except:
                return "Error: episodes in invalid format."

        try:
            watched = int(watched)
            total = int(total)
            seasons = int(seasons)
        except:
            return "Error: episodes in invalid format."

        if total == 0 and seasons > 1:
            total = watched

        for i in range(seasons):
            season = Season()
            season.num = i+1
            season.series = series
            season.episode_total = total
            season.current_watched = watched
            session.add(season)

            if watched > 0:
                session.commit()
                w = Watched()
                w.series = series
                w.season = season
                w.time = datetime.datetime.now()
                w.startep = 0
                w.finishep = watched
                w.seasonnum = season.num
                session.add(w)

        series.current = seasons
        series.eval_finished()
        session.commit()
    else:
        ## First season
        season = Season(num=1)
        season.series = series
        session.add(season)
        session.commit()
# }}}

# {{{ remove
@command()
def remove(arg, selector):
    """Remove a series in totality."""
    if not selector:
        return "Error: selector required."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    if not selection:
        return "Error: no series match selector."

    for sel in selection:
        print("Removing: %s..." % sel.title)

        for season in sel.seasons:
            session.query(Watched).filter(Watched.season == season).delete(False)
            session.delete(season)

        session.delete(sel)

    session.commit()
# }}}

# {{{ rate
@command()
def rate(arg, selector):
    """Set the rating/score for a series."""
    if not selector:
        return "Error: selector required."

    if not arg:
        return "Error: rating required."

    try:
        score = int(arg[0])
    except:
        return "Error: rating is not a valid number."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    for sel in selection:
        print("rating=%d: %s..." %(score, sel.title))
        sel.rating = score

    session.commit()
# }}}

# {{{ category
@command()
def category(arg, selector):
    """Set the category for a series."""
    if not selector:
        return "Error: selector required."

    if not arg:
        return "Error: category required."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    for sel in selection:
        print("category=%s: %s..." %(arg[0], sel.title))
        sel.category = arg[0]

    session.commit()
# }}}
    
# {{{ [un]drop
@command()
def drop(arg, selector):
    """Drop a series."""
    if not selector:
        return "Error: selector required."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)


    if not selection:
        return "Error: no series match selector."

    for sel in selection:
        print("dropped: %s..." % sel.title)
        sel.dropped = True

    session.commit()

@command()
def undrop(arg, selector):
    """Undrop a series."""
    if not selector:
        return "Error: selector required."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    for sel in selection:
        print("undropped: %s..." % sel.title)
        sel.dropped = False

    session.commit()
# }}}

# {{{ length
@command()
def length(arg, selector):
    """Set the current season's length for a series."""
    if not selector:
        return "Error: selector required."

    if not arg:
        return "Error: length required."

    try:
        length = int(arg[0])
    except:
        return "Error: length is not a valid number."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    for sel in selection:
        season = sel.current_season
        season.episode_total = length

        print("season %d length = %d: %s..."%
                (season.num, length, sel.title))

        sel.eval_finished()

    session.commit()
# }}}

# {{{ duration
@command()
def duration(arg, selector):
    """Set the duration per episode for a series."""
    if not selector:
        return "Error: selector required."

    if not arg:
        return "Error: duration required."

    try:
        duration = int(arg[0])
    except:
        return "Error: duration is not a valid number."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    for sel in selection:
        sel.duration = duration

        print("duration=%d: %s..."%
                (duration, sel.title))

    session.commit()
# }}}

# {{{ time
@command(name="time")
def totaltime(arg, selector):
    """Set the duration per episode for a series."""
    # Bind database
    session = dbbind()
    selection = getselection(session, selector)
    time = gettime(selection)

    print("Total time spent watching:")
    print("%.1f days = %d minutes" % (time[1], time[0]))
# }}}

# {{{ season
global seasoncmd
seasoncmd = {}

@command()
def season(arg, selector):
    """Run a season command"""
    if not arg:
        return "Error: season command required."

    global seasoncmd
    cmd = getcommand(arg[0], cmds=seasoncmd)

    if callable(cmd):
        return cmd(arg[1:], selector)
    elif cmd:
        print("Error: ambiguous season command, available:")
        print("\n".join(("  %s season "+x)%sys.argv[0] for x in cmd))
        exit(1)
    else:
        return "Error: Invalid Season Command: %s" % arg[0]

# {{{ active
@command(cmds=seasoncmd)
def active(arg, selector):
    """Set the rating/score for a series."""
    if not selector:
        return "Error: selector required."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    # Get number
    if arg:
        try:
            rel = arg[0][0] in ('+', '-')
            num = int(arg[0])
        except:
            return "Error: season number is not a valid number."
    else:
        return "Error: season number required."

    if not selection:
        return "Error: no series match selector."

    for sel in selection:
        sn = sel.current+num if rel else num

        if sn < 1:
            print("Error: season number for series %s too low (%d)."
                    % (sel.title, sn))
            continue

        season = sel.season_bynum(sn)

        if not season:
            print("Error: season %d for series %s doesn't exist."
                    % (sn, sel.title))
            continue

        print("activate season = %d: %s..." % (sn, sel.title))
        sel.current = season
        sel.eval_finished()

    session.commit()
# }}}

# {{{ add
@command(cmds=seasoncmd)
def add(arg, selector):
    """Set the rating/score for a series."""
    if not selector:
        return "Error: selector required."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    # Get number
    if arg:
        try:
            num = int(arg[0])
        except:
            return "Error: season number is not a valid number."
    else:
        num = None

    ## Parse episodes
    watched = 0
    total = 0

    if len(arg) > 1:
        if "/" in arg[1]:
            try:
                watched, total = map(int, arg[1].split("/"))
            except:
                return "Error: episodes in invalid format, ignoring."
        else:
            try:
                watched = int(arg[1])
            except:
                return "Error: episodes in invalid format, ignoring."

    ## Error on selector
    if not selection:
        return "Error: no series match selector."

    for sel in selection:
        sn = sel.current+1 if num==None else num

        if sn < 1:
            print("Error: season number for series %s too low (%d)."
                    % (sel.title, sn))
            continue

        if sel.season_bynum(sn):
            print("Error: season %d for series %s already exists."
                    % (sn, sel.title))
            continue

        season = Season()
        season.series = sel
        season.num = sn
        season.current_watched = watched
        season.episode_total = total
        sel.current = season.num

        print("Adding season %d: %s..." % (sn, sel.title))
        session.add(season)

        if watched:
            session.commit()
            w = Watched()
            w.series = sel
            w.season = season
            w.time = datetime.datetime.now()
            w.seasonnum = season.num
            w.startep = 0
            w.finishep = watched
            session.add(w)

        sel.eval_finished()

    session.commit()
# }}}

# {{{ remove
@command(cmds=seasoncmd)
def remove(arg, selector):
    """Remove a season from a series."""
    if not selector:
        return "Error: selector required."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    # Get number
    if arg:
        try:
            num = int(arg[0])
        except:
            return "Error: season number is not a valid number."
    else:
        num = None

    if not selection:
        return "Error: no series match selector."

    for sel in selection:
        sn = sel.current if num==None else num

        if sn < 1:
            print("Error: season number for series %s too low (%d)."
                    % (sel.title, sn))
            continue

        # Find season
        season = sel.season_bynum(sn)

        # Check for existence
        if not season:
            print("Error: season %d for series %s doesn't exist."
                    % (sn, sel.title))
            continue

        # Delete watched
        session.query(Watched).filter(Watched.season == season).delete(False)

        # Delete
        print("Removing season %d: %s..." % (sn, sel.title))
        session.delete(season)

        if sel.current == sn:
            # Get new season number
            sn -= 1
            while sn > 0 and not sel.season_bynum(sn):
                sn -= 1
            sel.current = sn

        sel.eval_finished()


    session.commit()
# }}}

# {{{ length
@command(cmds=seasoncmd)
def length(arg, selector):
    """Set the current season's length for a series."""
    if not selector:
        return "Error: selector required."

    if len(arg) < 2:
        return "Error: insufficient arguments."

    try:
        num = int(arg[0])
    except:
        return "Error: season number is not a valid number."

    try:
        length = int(arg[0])
    except:
        return "Error: length is not a valid number."

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    for sel in selection:
        season = sel.season_bynum(num)
        season.episode_total = length

        print("season %d length = %d: %s..."%
                (num, length, sel.title))

        sel.eval_finished()

    session.commit()
# }}}

# }}}

# {{{ watch
@command()
def watch(arg, selector):
    """Set the watched count for the currently active season."""
    if not selector:
        return "Error: selector required."

    if arg:
        try:
            rel = arg[0][0] in ('+', '-')
            num = int(arg[0])
        except:
            return "Error: watched amount is not a valid number."
    else:
        rel = True
        num = 1

    # Filter out silly numbers
    if rel and num == 0:
        return "Error: invalid watched amount: 0."
    elif not rel and num < 0:
        return "Error: invalid watched amount: %d." % num

    # Bind database
    session = dbbind()
    selection = getselection(session, selector)

    # Display header
    print(DISPLAY_HEADER)

    for sel in selection:
        season = sel.current_season
        neww = season.current_watched+num if rel else num

        if neww < 0:
            return "Error: invalid watched amount %d: %s." % (neww, sel.title)
        if season.episode_total > 0 and neww > season.episode_total:
            return "Error: watched amount %d is more than season length %d: %s."\
                     % (neww, season.episode_total, sel.title)

        if neww < season.current_watched:
            watched = session.query(Watched).filter(
                Watched.season == season
            ).order_by(Watched.finishep.desc()).all()

            for inst in watched:
                if inst.startep >= neww:
                    session.delete(inst)
                elif inst.finishep > neww:
                    inst.finishep = neww
                    break
        elif neww > season.current_watched:
            watched = Watched()
            watched.season = season
            watched.series = sel
            watched.startep = season.current_watched
            watched.finishep = neww
            watched.seasonnum = season.num
            watched.time = datetime.datetime.now()
            session.add(watched)

        sel.mtime = datetime.datetime.now()
        season.current_watched = neww
        sel.eval_finished()

        # Display series
        dispseries(sel)

        # Display log
        watched = session.query(Watched).filter(
            Watched.series == sel
        ).order_by(Watched.time.desc()).all() 

        if watched:
            # Display header
            print(DISPLAY_LOG_HEADER)

            for watch in watched:
                dispwatched(sel, watch, template=DISPLAY_LOG)

            # Display footer
            print(DISPLAY_LOG_FOOTER)


    # Display footer
    print(DISPLAY_FOOTER%len(selection))

    session.commit()
# }}}

# {{{ list
@command()
def list(arg, selector):
    """Display lines matching a selector."""
    # Bind database
    session = dbbind()

    # Get selection
    selection = getselection(session, selector)

    # Display header
    print(DISPLAY_HEADER)

    for sel in selection:
        dispseries(sel)

    # Display footer
    print(DISPLAY_FOOTER%len(selection))
# }}}

# {{{ hist
@command()
def hist(arg, selector):
    """Display watched history."""
    # Bind database
    session = dbbind()

    # Category
    if arg:
        try:
            num = int(arg[0])
        except:
            return "Error: history amount is not a valid number."
    else:
        num = 15


    # Build query
    q = session.query(Watched).order_by(Watched.time.desc()).limit(num)

    # Display header
    print(DISPLAY_HIST_HEADER)

    for watch in q.all():
        dispwatched(watch.series, watch)

    # Display footer
    print(DISPLAY_HIST_FOOTER)
# }}}

# {{{ log
@command()
def log(arg, selector):
    """Display lines matching a selector."""
    # Bind database
    session = dbbind()

    # Get selection
    selection = getselection(session, selector)

    # Display header
    print(DISPLAY_HEADER)

    for sel in selection:
        dispseries(sel)
        watched = session.query(Watched).filter(
            Watched.series == sel
        ) .order_by(
            Watched.time.desc(),
            Watched.seasonnum.desc(),
            Watched.finishep.desc()
        ).all()

        if watched:
            # Display header
            print(DISPLAY_LOG_HEADER)

            for watch in watched:
                dispwatched(sel, watch, template=DISPLAY_LOG)

            # Display footer
            print(DISPLAY_LOG_FOOTER)

    # Display footer
    print(DISPLAY_FOOTER%len(selection))
# }}}

# }}}

# {{{ Main function
def main():
    # Retrieve arguments
    arg = sys.argv[1:]

    # Intercept help
    if not arg or arg[0] in ("help", "--help", "-h"):
        print(HELPTEXT%sys.argv[0])
        return

    # Get selector and arguments
    ## Check if there exists a selector
    if filter(lambda x: x.endswith(":"), arg):
        selector = []
        newargs = addto = []

        # Build selector
        for i,x in enumerate(arg):
            addto.append(x)

            if x.endswith(":"):
                addto = selector

        # Remove colon
        arg = newargs
        arg[-1] = arg[-1][:-1]
    else:
        selector=[]

    # Call the command
    cmd = getcommand(arg[0])

    if callable(cmd):
        res = cmd(arg[1:], selector)

        if res:
            # An error occured
            print(res)
            exit(1)
    elif cmd:
        print("Error: ambiguous command, available:")
        print("\n".join(("  %s "+x)%sys.argv[0] for x in cmd))
        exit(1)
    else:
        print("Error: Invalid Command: %s" % arg[0])
        print(HELPTEXT%sys.argv[0])
        exit(1)
# }}}

# Call main function
if __name__ == '__main__':
    main()
# vim: set fdm=marker :
